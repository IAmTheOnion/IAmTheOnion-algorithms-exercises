def DecNaBin(dec, p):
    bin = []
    while dec > 0:
        bin = [dec % p] + bin
        dec = dec // p
    return bin


def BinNaDec(bin, p):
     bin = bin[::-1]
     dec = 0
     for i in range(0, length(bin)):
         dec += bin[i] * (p ** i)

     return dec


def dodawanie(bin1, bin2, p):
    if length(bin1) > length(bin2):
        l = length(bin1)
        bin2 = [0] * (l - length(bin2)) + bin2
    else:
        l = length(bin2)
        bin1 = [0] * (l - length(bin1)) + bin1

    r = 0
    bin = []

    for i in range(l - 1, -1, -1):
        w = bin1[i] + bin2[i] + r
        if w >= 7:
            r = 1
            w -= 7
        else:
            r = 0

        bin = [w] + bin
    if r == 1:
        bin = [1] + bin

    return bin


def decNaU2(dec, p):
    if dec >= 0:
        bin = DecNaBin(dec)
        bin = [0] * (p - length(bin)) + bin
        return bin
    else:
        bin = DecNaBin(dec * -1)
        bin = [0] * (p - length(bin)) + bin
        print(bin)
        for i in range(0, length(bin)):
            if bin[i] == 1:
                bin[i] = 0
            elif bin[i] == 0:
                bin[i] = 1
        print(bin)
        bin = dodawanie(bin, [1], 2)
        print(bin)
        return bin


def decNaBinZPrzecinkiem(dec):
    cc = int(dec)
    cu = dec - cc

    bcc = ""
    for i in DecNaBin(cc):
        bcc += str(i)

    bcu = ""
    while cu > 0:
        cu = cu * 2
        b = int(cu)
        bcu += str(b)
        cu -= b

    return  bcc + "." + bcu



def length(tab):
    j = 0
    for _ in tab:
        j+=1
    return j



print(BinNaDec(dodawanie(DecNaBin(48,2),DecNaBin(142,2),2),2))

print(BinNaDec(dodawanie(DecNaBin(12,7),DecNaBin(4,7),2),7))
